using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using Microsoft.Win32;
using Newtonsoft.Json;
using RestSharp;
using static Dissertation2.Bing;
using static Dissertation2.Google;
using static Dissertation2.VulDB;
using System.Text.RegularExpressions;
using System.ServiceProcess;

namespace Dissertation2
{
    public partial class Checker : Form
    {
        const string googleKey = "PASTE";
        const string bingKey = "YOUR";
        const string vulDBKey = "KEYS";
        const string chatGPTKey = "HERE";

        public Checker()
        {
            InitializeComponent();
        }

        public void GetStartupApps()
        {
            string startupApplication = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";

            RegistryKey key = Registry.LocalMachine.OpenSubKey(startupApplication);

            for (int i = 0; i < 2; i++)
            {
                foreach (string valueName in key.GetValueNames())
                {
                    object value = key.GetValue(valueName);

                    if (value.ToString().Contains(".exe"))
                    {
                        string fileName = ExtractFilePath(value.ToString());

                        AddDataRow(fileName, "Startup");
                    }
                }

                key = Registry.CurrentUser.OpenSubKey(startupApplication);
            }
        }

        public void GetRunningServices()
        {
            string services = @"SYSTEM\CurrentControlSet\Services\";

            RegistryKey key = Registry.LocalMachine.OpenSubKey(services);

            List<string[]> servicesList = new List<string[]>();

            foreach (string serviceName in key.GetSubKeyNames())
            {
                RegistryKey subKey = key.OpenSubKey(serviceName);

                object filePath = subKey.GetValue("ImagePath");
                object displayName = subKey.GetValue("DisplayName");

                if (filePath != null && displayName != null)
                {
                    string filePathString = filePath.ToString();

                    if (filePathString.Contains(".exe"))
                    {
                        string fileName = ExtractFilePath(filePathString);

                        servicesList.Add(new string[] { serviceName, displayName.ToString(), fileName });
                    }
                    else
                    {
                        //Not an executable.
                    }
                }
                else
                {
                    //No service name.
                }
            }

            ServiceController[] s2 = ServiceController.GetServices();

            string runningServiceName = null;
            bool found = false;

            foreach (ServiceController service in s2)
            {
                if (service.Status == ServiceControllerStatus.Running)
                {
                    runningServiceName = service.ServiceName;

                    found = false;

                    foreach (string[] arr in servicesList)
                    {
                        if (arr[0].Equals(runningServiceName))
                        {
                            AddDataRow(arr[2], "Service");
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        MessageBox.Show(runningServiceName + " not found.");
                    }
                }
            }
        }

        public string ExtractFilePath(string filePath)
        {
            string drive = "";

            if (filePath.Contains("C:\\"))
            {
                drive = "C:\\";
            }

            if (filePath.Contains("D:\\"))
            {
                drive = "D:\\";
            }

            int indexStart = filePath.IndexOf(drive);
            int indexEnd = filePath.IndexOf(".exe");
            filePath = filePath.Substring(indexStart, indexEnd + 4 - indexStart);

            return filePath;
        }

        public void AddDataRow(string fileName, string type)
        {
            try
            {
                FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(fileName);

                string name = versionInfo.ProductName;

                if (!(name.Equals("Microsoft® Windows® Operating System") && chkHideOperatingSystemServices.Checked))
                {
                    string version = versionInfo.FileVersion;

                    if (version != null)
                    {
                        string versionStr = version.ToString();
                        string nameStr = name.ToString().Replace(versionStr, "").Replace("  ", " ");
                        nameStr = Regex.Replace(nameStr, @"\(.*\)", "");

                        versionStr = versionStr.Replace("  ", " ").Replace(',', '.').Replace(" ", "");

                        nameStr = nameStr.Trim();
                        versionStr = versionStr.Trim();

                        if (nameStr.Equals(""))
                        {
                            nameStr = fileName.Substring(fileName.LastIndexOf("\\") + 1) + " *Attention*";
                        }

                        dgvSoftware.Rows.Add(nameStr, versionStr, versionInfo.CompanyName, type);
                    }
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
            }
        }

        public void AddDataRow(RegistryKey registryKey)
        {
            try
            {
                //dataTable.Rows.Add(name.ToString(), sk.GetValue("DisplayVersion"), sk.GetValue("Publisher"),"Installed App");

                object name = registryKey.GetValue("DisplayName");

                if (name != null)
                {
                    object version = registryKey.GetValue("DisplayVersion");

                    if (version != null)
                    {
                        object companyName = registryKey.GetValue("Publisher");

                        if (companyName != null)
                        {
                            string versionStr = version.ToString();
                            string nameStr = name.ToString().Replace(versionStr, "").Replace("  ", " ");
                            nameStr = Regex.Replace(nameStr, @"\(.*\)", "");

                            versionStr = versionStr.Replace("  ", " ").Replace(',', '.').Replace(" ", "");

                            nameStr = nameStr.Trim();
                            versionStr = versionStr.Trim();

                            dgvSoftware.Rows.Add(nameStr, versionStr, companyName.ToString(), "Installed App");

                            //dataTable.Rows.Add(nameStr, versionStr, companyName.ToString(), "Installed App");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void GetInstalledApps()
        {
            string[] uninstallKeyLocations = new string[3];

            uninstallKeyLocations[0] = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
            uninstallKeyLocations[1] = @"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall";
            uninstallKeyLocations[2] = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";

            RegistryKey key;

            foreach (string softwarekey in uninstallKeyLocations)
            {
                key = Registry.LocalMachine.OpenSubKey(softwarekey);

                foreach (string subKeyName in key.GetSubKeyNames())
                {
                    RegistryKey sk = key.OpenSubKey(subKeyName);

                    AddDataRow(sk);
                }
            }

            key = Registry.CurrentUser.OpenSubKey(uninstallKeyLocations[0]);

            foreach (string subKeyName in key.GetSubKeyNames())
            {
                RegistryKey sk = key.OpenSubKey(subKeyName);

                AddDataRow(sk);
            }

            key = Registry.CurrentUser.OpenSubKey(uninstallKeyLocations[2]);

            foreach (string subKeyName in key.GetSubKeyNames())
            {
                RegistryKey sk = key.OpenSubKey(subKeyName);

                AddDataRow(sk);
            }
        }

        private void Checker_Load(object sender, EventArgs e)
        {

        }

        private async void dgvSoftware_CellClick(object? sender, DataGridViewCellEventArgs e)
        {
            int buttonIndex = dgvSoftware.Columns["Check"].Index;

            if (e.ColumnIndex == buttonIndex)
            {
                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value = "";

                string publisher = dgvSoftware.Rows[e.RowIndex].Cells["Publisher"].Value.ToString();
                string program = dgvSoftware.Rows[e.RowIndex].Cells["Process_Name"].Value.ToString();
                string version = dgvSoftware.Rows[e.RowIndex].Cells["Version"].Value.ToString();

                string programVersion = program + " " + version;

                List<string> listOfStrings = new List<string>();
                listOfStrings.Add("VULNERABILITY");
                listOfStrings.Add("CVE");
                listOfStrings.Add("EXPLOIT");
                listOfStrings.Add("ZERO-DAY");

                //Google
                string googleResult = ProcessCves(listOfStrings, GetGoogleResults(program, version));

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += googleResult + "\r\n\r\n";

                //Bing
                string bingResult = ProcessCves(listOfStrings, GetBingResults(programVersion));

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += bingResult + "\r\n\r\n";

                //NIST
                List<NIST.Product> products = GetNistResults(programVersion);
                string nistResult = "NIST - Potential issues;";

                if (products.Count > 0)
                {
                    nistResult += products[0].cpe.cpeName.ToString();
                }
                else
                {
                    nistResult += "\r\nNo cause for concern.";
                }

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += nistResult + "\r\n\r\n";

                //VULDB
                List<Result> result = GetVulDbResults(programVersion);
                string vulDbResult = "VulDB - Potential issues;";

                if (result != null)
                {
                    vulDbResult += result[0].entry.title;
                }
                else
                {
                    vulDbResult += "\r\nNo cause for concern.";
                }

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += vulDbResult + "\r\n\r\n";

                //OPENAI
                string openAIResult = "OpenAI - Potential issues;";
                string openAIResult2 = await OpenAI(programVersion);
                openAIResult += "\r\n" + openAIResult2.TrimStart();

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += openAIResult + "\r\n\r\n";

                //Get version information.
                string versionResult = "Occurrances of version numbers;\r\n\r\n" + GetVersionInfo(publisher, program, version);

                dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value += versionResult;

                Clipboard.SetData(DataFormats.Text, (object)dgvSoftware.Rows[e.RowIndex].Cells["Result"].Value.ToString());
            }
        }

        private string ProcessCves(List<string> strings, object objectCveToProcess)
        {
            List<object[]> cveProcessed = new List<object[]>();

            List<Google.Item> googleItems = null;
            List<Bing.Value> bingItems = null;

            string type = objectCveToProcess.GetType().GetGenericArguments()[0].UnderlyingSystemType.DeclaringType.FullName;
            type = type.Substring(type.IndexOf(".") + 1);

            List<object> list = new List<object>();

            List<Object> cveToProcess = new List<Object>((IEnumerable<Object>)objectCveToProcess);

            foreach (object value in cveToProcess)
            {
                if (value != null)
                {
                    string snippetUpper = "";

                    if (type.Equals("Google"))
                    {
                        snippetUpper = (value as Google.Item).title.ToUpper();
                    }
                    else if (type.Equals("Bing"))
                    {
                        snippetUpper = (value as Bing.Value).snippet.ToUpper();
                    }
                    else
                    {
                        throw new Exception("Unknown type");
                    }

                    if (strings.Any(snippetUpper.Contains))
                    {
                        //it contains a trigger term.
                        //termscount++;

                        int cvementions = 0;
                        int n = 0;

                        while ((n = snippetUpper.IndexOf("CVE", n)) != -1)
                        {
                            n++;
                            cvementions++;
                        }

                        if (cvementions > 0)
                        {
                            string remainingstring = snippetUpper;

                            for (int i = 0; i < cvementions; i++)
                            {
                                int index = remainingstring.IndexOf("CVE");
                                //possibly more than one cve mentioned.

                                remainingstring = remainingstring.Substring(index);
                                index = remainingstring.IndexOfAny(new char[] { ' ', ',', '.' });

                                string cve;

                                if (index == -1)
                                {
                                    cve = remainingstring;
                                    remainingstring = "";
                                }
                                else
                                {
                                    cve = remainingstring.Substring(0, index);
                                    remainingstring = remainingstring.Substring(index);
                                }

                                if (cve.Length > 3)
                                {
                                    bool found = false;

                                    foreach (object[] obj in cveProcessed)
                                    {
                                        if (obj[0].Equals(cve))
                                        {
                                            obj[1] = (int)obj[1] + 1;
                                            found = true;
                                            break;
                                        }
                                    }

                                    if (!found)
                                    {
                                        cveProcessed.Add(new object[] { cve, 1 });
                                    }
                                }
                            }
                        }
                    }
                }
            }

            cveProcessed = cveProcessed.OrderBy(o => o[0]).ToList();

            string result = type + " - Potential issues;\r\n";

            if (cveProcessed.Count > 0)
            {
                foreach (object[] cve in cveProcessed)
                {
                    result += cve[0] + " (" + cve[1] + " occurrences), ";
                }

                result = result.Substring(0, result.Length - 2) + ".";
            }
            else
            {
                result += "No cause for concern.";
            }

            return result;
        }

        private List<NIST.Product> GetNistResults(string programVersion)
        {
            RestClient rc = new RestClient();

            RestRequest rreq = new RestRequest("https://services.nvd.nist.gov/rest/json/cpes/2.0", Method.Get);
            rreq.AddParameter("keywordSearch", programVersion);

            List<NIST.Product> products = new List<NIST.Product>();

            try
            {
                RestResponse rres = rc.Get(rreq);
                NIST.NISTRoot myDeserializedClass = JsonConvert.DeserializeObject<NIST.NISTRoot>(rres.Content);
                products = myDeserializedClass.products;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            return products;
        }

        private List<Result> GetVulDbResults(string programVersion)
        {
            RestClient rc = new RestClient();

            RestRequest rreq = new RestRequest("https://vuldb.com/?api", Method.Post);
            rreq.AddHeader("X-VulDB-ApiKey", vulDBKey);

            rreq.AddParameter("search", programVersion);

            RestResponse rres = null;

            rres = rc.Post(rreq);

            VulDbRoot myDeserializedClass = JsonConvert.DeserializeObject<VulDbRoot>(rres.Content);

            return myDeserializedClass.result;
        }

        private List<Google.Item> GetGoogleResults(string program, string version)
        {
            List<Google.Item> items = new List<Google.Item>();

            string engineId = "80409e53816714af1";

            RestClient rc = new RestClient();

            RestRequest rreq = new RestRequest("https://customsearch.googleapis.com/customsearch/v1?key=" + googleKey, Method.Get);
            rreq.AddParameter("cx", engineId);

            if (version is not null)
            {
                rreq.AddParameter("q", program + " " + version + " vulnerability exploit");
            }
            else
            {
                rreq.AddParameter("q", program + " latest version windows download");
            }

            rreq.AddParameter("start", 0);

            RestResponse rres = null;

            try
            {
                rres = rc.Get(rreq);

                GoogleRoot myDeserializedClass = JsonConvert.DeserializeObject<GoogleRoot>(rres.Content);

                if (myDeserializedClass.items != null)
                {
                    int count = Convert.ToInt32(myDeserializedClass.items.Count);
                    int totalResults = Convert.ToInt32(myDeserializedClass.searchInformation.totalResults);

                    items.AddRange(myDeserializedClass.items);

                    int nextIndex = count + 1;

                    try
                    {
                        while (nextIndex < totalResults && nextIndex < 30)
                        {
                            rreq.Parameters.RemoveParameter("start");
                            rreq.AddParameter("start", nextIndex);

                            rres = rc.Get(rreq);

                            try
                            {
                                items.AddRange(JsonConvert.DeserializeObject<GoogleRoot>(rres.Content).items);
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show()
                            }

                            nextIndex += count;
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Google - " + ex.Message);
            }

            return items;
        }

        private List<Bing.Value> GetBingResults(string programVersion)
        {
            List<Bing.Value> values = new List<Bing.Value>();

            string endpoint = "https://api.bing.microsoft.com/" + "/v7.0/search";

            RestClient rc = new RestClient();

            RestRequest rreq = new RestRequest("https://api.bing.microsoft.com/v7.0/search", Method.Get);

            rreq.AddHeader("Ocp-Apim-Subscription-Key", bingKey);
            rreq.AddParameter("q", programVersion + " vulnerability exploit");
            rreq.AddParameter("offset", 0);

            try
            {
                RestResponse rres = rc.Get(rreq);

                BingRoot myDeserializedClass = JsonConvert.DeserializeObject<BingRoot>(rres.Content);

                int count = Convert.ToInt32(myDeserializedClass.webPages.value.Count);
                int totalResults = Convert.ToInt32(myDeserializedClass.webPages.totalEstimatedMatches);

                values.AddRange(myDeserializedClass.webPages.value);

                int nextIndex = count + 1;

                try
                {
                    while (nextIndex < totalResults && nextIndex < 30)
                    {
                        rreq.Parameters.RemoveParameter("offset");
                        rreq.AddParameter("offset", nextIndex);
                        rres = rc.Get(rreq);

                        bool ok = false;

                        try
                        {

                            BingRoot br = JsonConvert.DeserializeObject<BingRoot>(rres.Content);

                            if (br.webPages != null)
                            {
                                List<Bing.Value> v2 = br.webPages.value;

                                values.AddRange(v2);
                            }
                            else
                            {
                                break;
                            }
                        }
                        catch (NullReferenceException ex)
                        {
                            break;
                        }

                        nextIndex += count;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            catch (Exception ex)
            {

            }

            return values;
        }

        private async static Task<string> OpenAI(string programVersion)
        {
            string response = "";

            var api = new OpenAI_API.OpenAIAPI(chatGPTKey);

            string expression = "Which vulnerabilities or exploits can be found for " + programVersion + "? (Reply in 2 sentences or less)";

            var chat = api.Chat.CreateConversation();
            chat.AppendUserInput(expression);

            await foreach (var res in chat.StreamResponseEnumerableFromChatbotAsync())
            {
                response += res.ToString();
            }

            return response;
        }

        private void btnExamine_Click(object sender, EventArgs e)
        {
            dgvSoftware.Rows.Clear();

            if (radServices.Checked)
            {
                GetStartupApps();
                GetRunningServices();
            }
            else
            {
                GetInstalledApps();
            }

            dgvSoftware.Sort(dgvSoftware.Columns[0], ListSortDirection.Ascending);

            dgvSoftware.Columns["Result"].DefaultCellStyle.WrapMode = DataGridViewTriState.True;

            if (radServices.Checked)
            {
                lblCount.Text = "Apps & Services Found: " + dgvSoftware.Rows.Count.ToString() + ".";
            }
            else
            {
                lblCount.Text = "Programs Installed: " + dgvSoftware.Rows.Count.ToString() + ".";
            }
        }

        private struct VersionRecord
        {
            public string VersionNumber { get; set; }
            public int Occurances { get; set; }

            public VersionRecord(string versionNumber, int occurances)
            {
                VersionNumber = versionNumber;
                Occurances = occurances;
            }
        }

        private string GetVersionInfo(string publisher, string program, string version)
        {
            int versionFullStops = version.Split('.').Length - 1;

            List<Google.Item> googleItems = GetGoogleResults(publisher + " " + program, null);
            List<VersionRecord> versions = new List<VersionRecord>();

            int number;
            string versionBuilder = "";

            foreach (Google.Item googleItem in googleItems)
            {
                string toCheck = googleItem.title;

                for (int b = 0; b < 2; b++)
                {
                    int lastQualifingPos = int.MinValue;

                    for (int i = 0; i < toCheck.Length; i++)
                    {
                        if (int.TryParse(toCheck[i].ToString(), out number) || toCheck[i].ToString().Equals("."))
                        {
                            //Ok, here's the start of a word.

                            versionBuilder = toCheck[i].ToString();

                            bool checkNext = true;

                            int a = 1;

                            while (checkNext)
                            {
                                if (i + a < toCheck.Length)
                                {
                                    checkNext = int.TryParse(toCheck[i + a].ToString(), out number) || toCheck[i + a].ToString().Equals(".");
                                }
                                else
                                {
                                    checkNext = false;
                                }

                                if (checkNext)
                                {
                                    if (versionBuilder.Substring(versionBuilder.Length - 1, 1).Equals(".") && toCheck[i + a].ToString().Equals("."))
                                    {
                                        //Skip this full stop.
                                    }
                                    else
                                    {
                                        versionBuilder += toCheck[i + a].ToString();
                                    }

                                    a++;
                                }
                                else
                                {
                                    //End of the word.

                                    versionBuilder = versionBuilder.Trim('.');

                                    if (versionBuilder.Split('.').Length - 1 == versionFullStops)
                                    {
                                        VersionRecord vr = versions.Find(o => o.VersionNumber.Equals(versionBuilder));

                                        if (vr.VersionNumber == null)
                                        {
                                            versions.Add(new VersionRecord(versionBuilder, 1));
                                        }
                                        else
                                        {
                                            versions.Remove(vr);

                                            versions.Add(new VersionRecord(versionBuilder, vr.Occurances + 1));
                                        }
                                    }

                                    versionBuilder = "";
                                    i += a;
                                }
                            }
                        }
                    }

                    toCheck = googleItem.snippet;
                }
            }

            string result = "";

            List<VersionRecord> versionsSorted = versions.OrderByDescending(o => o.VersionNumber).ToList();

            foreach (VersionRecord vr in versionsSorted)
            {
                result += vr.VersionNumber + " (" + vr.Occurances + " mentions)\r\n";
            }

            return result;
        }
    }
}